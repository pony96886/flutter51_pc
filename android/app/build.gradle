def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"
apply from: "../config.gradle"

android {
    namespace = "com.example.chaguaner2023"
    compileSdkVersion 34

    compileOptions {
        coreLibraryDesugaringEnabled true
        // sourceCompatibility JavaVersion.VERSION_1_8
        // targetCompatibility JavaVersion.VERSION_1_8
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = '17'
    }

    // sourceSets {
    //     main.java.srcDirs += 'src/main/kotlin'
    // }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId packagedata["applicationId"]
        minSdkVersion 21
        targetSdkVersion 31
        versionCode versiondata["versionCode"]
        versionName versiondata["versionName"]
        multiDexEnabled true
    }

    lintOptions {
        disable 'InvalidPackage'
        disable "Instantiatable"
        checkReleaseBuilds false
        abortOnError false
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so flutter run --release works.
            signingConfig signingConfigs.debug
            ndk{
                abiFilters "armeabi", "armeabi-v7a","arm64-v8a"
            }
            minifyEnabled false
            shrinkResources false
        }
        debug {
            signingConfig signingConfigs.debug
            ndk {
                abiFilters "armeabi", "armeabi-v7a","arm64-v8a", "x86"
            }
        }
    }

    applicationVariants.all {
        variant ->
            if (variant.buildType.name.equals('release')) {
                variant.outputs.all {
                    variant.getPackageApplication().outputDirectory = new File('../apk/output/')
                    outputFileName = "output.apk"
                }
            }
    }

    dependencies {
        // implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
        implementation 'com.otaliastudios:transcoder:0.10.5'
        coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:2.0.3'
        // implementation 'com.google.android.exoplayer:exoplayer:2.12.1'
        // implementation 'com.google.android.exoplayer:exoplayer-hls:2.12.1'
        // implementation 'com.google.android.exoplayer:exoplayer-dash:2.12.1'
        // implementation 'com.google.android.exoplayer:exoplayer-smoothstreaming:2.12.1'
    }
}

flutter {
    source '../..'
}

tasks.whenTaskAdded { task ->
    if (task.name.contains("ReleaseApkListingFileRedirect")){
        task.enabled = false
    }
}
